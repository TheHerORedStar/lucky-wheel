openapi: 3.0.1
tags:
  - name: Auth
    description: API for Auth
  - name: Users
    description: API for Users

paths:
  /signup:
    post:
      tags:
        - Auth
      requestBody:
        description: Optional description in *Markdown* sign up
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/signUpDto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /login:
    post:
      tags:
        - Auth
      requestBody:
        description: Login data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/users'
      responses:
        200:
          description: 'Ok'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [GET] users
  /users:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []

      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] users
    post:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Add User
      requestBody:
        description: user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/signUpDto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] users/id
  /users/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find User By Id
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] users/id
    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Update User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/signUpDto'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] users/id
    delete:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Delete User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /users/change-password/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: user change password
      parameters:
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            type: object
            required:
              - currentPassword
              - newPassword
            properties:
              currentPassword:
                type: string
              newPassword:
                type: string

      responses:
        200:
          description: 'OK'
        400:
          description: 'BAD REQUEST'
        500:
          description: 'Server Error'

  /users/change-password-by-admin/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: user change password
      parameters:
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            type: object
            required:
              - newPassword
            properties:
              newPassword:
                type: string

      responses:
        200:
          description: 'OK'
        400:
          description: 'BAD REQUEST'
        500:
          description: 'Server Error'

# definitions
definitions:
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

  signUpDto:
    type: object
    required:
      - email
      - password
      - firstName
      - lastName
    properties:
      id:
        description: user Id
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
      firstName:
        type: string
        description: user firstName
      lastName:
        type: string
        description: user lastName
      roleId:
        type: string
        description: user roleId
      phoneNumber:
        type: string
        description: phone number
schemes:
  - https
  - http

components:
  securitySchemes:
    bearerAuth:
      type: http
      in: header
      scheme: bearer
      bearerFormat: 'JWT'
      name: Authorization
      description: Enter your token in the format **token**
  responses:
    UnauthorizedError:
      description: token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: false
              code:
                type: number
                example: 401
              message:
                type: string
                example: Unauthenticated
              data:
                type: object
                example: {}
              version:
                type: string
                example: v1.0
    BadRequestError:
      description: bad input parameter
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              code:
                type: number
                example: 400
              message:
                type: string
                example: plantId is not blank
              data:
                type: object
                example: {}
              version:
                type: string
                example: v1.0
    InternalServiceError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              code:
                type: number
                example: 500
              message:
                type: string
                example: Internal Server Error
              data:
                type: object
                example: {}
              version:
                type: string
                example: v1.0
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              code:
                type: number
                example: 404
              message:
                type: string
                example: Resource not found
              data:
                type: object
                example: {}
              version:
                type: string
                example: v1.0
    PermissionDenied:
      description: User's role don't have permission for operation
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                example: false
              code:
                type: number
                example: 403
              message:
                type: string
                example: User's role don't have
              data:
                type: object
                example: {}
              version:
                type: string
                example: v1.0
